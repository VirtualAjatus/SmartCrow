(define-data-var contract-deployer principal tx-sender)

(define-map mint-price-map
  {id: uint}
  {price: uint})
  
(define-public (set-mint-price (id uint) (price uint))
    (begin
        ;; Only the contract deployer can set the mint price
        (asserts! (is-eq tx-sender (var-get contract-deployer)) (err u100))
        (map-set mint-price-map {id: id} {price: price})
        (ok u0)))
        
(define-public (mint-nft (id uint))
    (let (
            (price (unwrap! (get price (map-get? mint-price-map {id: id})) (err u101)))
            (user-balance (stx-get-balance tx-sender))
        )
        ;; Check if the sender has sufficient balance
        (asserts! (>= user-balance price) (err u102))
        
        ;; Transfer the STX to the bonding curve contract
        (stx-transfer? price tx-sender 'SP2J6Y09JMFWWZCT4VJX0BA5W7A9HZP5EX96Y6VZY)
        
        ;; Call the bonding curve contract's mint function
        (let (
                (mint-result (contract-call? 'SP2J6Y09JMFWWZCT4VJX0BA5W7A9HZP5EX96Y6VZY.earlycrows-bonding-curve mint id))
              )
          (ok mint-result))
    ))
